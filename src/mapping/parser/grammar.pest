mapping = _{ SOI ~ statement ~ (NEWLINE+ ~ statement)* ~ NEWLINE* ~ EOI }

statement = _{ assignment | function | if_statement }

assignment = { target_path ~ "=" ~ query_arithmetic }


if_statement = {
    "if" ~ query_arithmetic ~ "{" ~ NEWLINE* ~
        statement ~
    NEWLINE* ~ "}" ~ ( "else" ~ "{" ~ NEWLINE* ~
        statement ~
    NEWLINE* ~ "}" )?
}

// Used by `src/event/lookup.rs`
lookup = { (path_segment | quoted_path_segment) ~ ("." ~ (path_segment | quoted_path_segment))* }

// Paths
path_index =$ { "[" ~ inner_path_index ~ "]" }
inner_path_index = { '0'..'9'+ }
path_segment = ${ path_field_name ~ path_index* }
path_field_name = { (ASCII_ALPHANUMERIC | "_" | "-" )+ }
quoted_path_segment = ${ "\"" ~ inner_quoted_string ~ "\"" ~ path_index* }

target_path = @{ ("." ~ (path_segment | quoted_path_segment))+ }

// Functions
function = {
    deletion |
    only_fields |
    merge |
    log
}

deletion = { "del(" ~ target_paths ~ ")" }
only_fields = { "only_fields(" ~ target_paths ~ ")" }
merge = { "merge(" ~ target_path ~ "," ~ query_arithmetic ~ ("," ~ query_arithmetic)? ~ ")" }
log = { "log(" ~ query_arithmetic ~ ("," ~ "level" ~ "=" ~ loglevel)? ~ ")" }

loglevel = { "trace" | "debug" | "info" | "warn" | "error" }

// One or more path arguments for a given function.
//
// Can be used to parse functions that take one or more paths, e.g.:
//
// my_func = { "my_func(" ~ target_paths ~ ")" }
// => my_func(.bar, .baz)
//
target_paths = _{ target_path ~ ("," ~ target_path)* }

// Queries
path_coalesce = !{ "(" ~ (path_segment | quoted_path_segment) ~ ("|" ~ (path_segment | quoted_path_segment))+ ~ ")" }

dot_path = ${ ("." ~ (path_segment | quoted_path_segment | path_coalesce))+ }

ident = @{ ASCII_ALPHANUMERIC ~ ( ASCII_ALPHANUMERIC | "_" )* }

// Functions

query_function = ${ ident ~ "(" ~ inner_function? ~ ")"  }

inner_function = !{ argument_list }

argument_list = _{ argument ~ ("," ~ argument)* }

argument = { positional_item | keyword_item }

positional_item = { argument_item }

keyword_item = { ident ~ "=" ~ query_arithmetic }

argument_item = { query_arithmetic | regex }

// end: Functions

// Regex

regex = ${ "/" ~ inner_regex_string ~ "/" ~ regex_flags }
inner_regex_string = @{ regex_char* }
regex_char = {
    !("/" | "\\") ~ ANY
    | "\\" ~ ANY
}
regex_flags = @{ ("i" | "g" | "m")* }

// end: Regex

group = { "(" ~ query_arithmetic ~ ")" }

value = _{ string | float | integer | boolean | null }

boolean = { "true" | "false" }

null = { "null" }

string = ${ "\"" ~ inner_quoted_string ~ "\"" }
inner_quoted_string = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "n" | "t")
    // TODO: Eventually expand this to allow more escape sequences.
    // | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    // | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

integer = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
}

float = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ((("." ~ ASCII_DIGIT*) ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?)
        | (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+))
}

not_operator = { "!" ~ query_leaf }

query_leaf = _{ not_operator | value | dot_path | group | query_function }

// Arithmetic, broken down into tiers in order to support operator precedence.
// Operators of the same tier are resolved from left to right.

// Deepest tier is the highest order of precedence, we call this just 'query' as
// it'll appear in parser error messages.
arithmetic_operator_product = { "*" | "/" | "%" }
query = { query_leaf ~ (arithmetic_operator_product ~ query_leaf)* }

arithmetic_operator_sum = { "+" | "-" }
query_arithmetic_sum = { query ~ (arithmetic_operator_sum ~ query)* }

arithmetic_operator_compare = { ">=" | ">" | "<=" | "<" | "!=" | "==" }
query_arithmetic_compare = { query_arithmetic_sum ~ (arithmetic_operator_compare ~ query_arithmetic_sum)* }

arithmetic_operator_boolean = { "||" | "&&" }
query_arithmetic_boolean = { query_arithmetic_compare ~ (arithmetic_operator_boolean ~ query_arithmetic_compare)* }

query_arithmetic = _{ query_arithmetic_boolean }

WHITESPACE = _{ " " | "\t" }
